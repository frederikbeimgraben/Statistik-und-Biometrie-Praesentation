#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Evaluation of the results of the survey (source: LimeSurvey)

---

Total assignment:

A study is always an independent and specific project. For this reason, there are no strict
and static guidelines for the structure of the study, but rather a number of conceptual
aspects and guidelines that must be taken into account. These must be reflected in the
presentation. However, it is crucial that the description of the study is consistent in itself.
Objectives, questions, prerequisites, methods, implementation and descriptive statistics
must be presented in a comprehensible, complete and understandable manner.
In the context of the course Introduction to Statistics and Biometry, this structure is to be
realized in four subtasks, and documented accordingly. The study topic should be chosen
individually by each group.
The overall task is to document the entire study. The description of the content should
not exceed 5-8 pages. Please note that this is important: This page limit refers only to
the documentation of the content. The actual questionnaire as well as the pure raw data
processing by means of descriptive statistics are not subject to any limitation with
regard to the number of pages, since they depend on the chosen topic as well as the
presentation of the key figures and distributions. The overall documentation will
therefore naturally contain more than the 5-8 pages.

---

This file is part of the evaluation of the survey results. The data is loaded from a JSON file generated by LimeSurvey.
"""

from dataclasses import dataclass
import json
from typing import Any, Callable, Dict
from matplotlib.figure import Figure
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import questions as q

import os

from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument("-i", "--input", dest="input", help="Input file")
args = parser.parse_args()

# Load the data
INPUT_PATH = args.input

# Function to load the data (JSON)
def load_data(input_path) -> dict:
    assert os.path.exists(input_path), f"File not found: {input_path}"
    assert input_path.endswith('.json'), f"Invalid file format: {input_path}"

    data: dict = None

    with open(input_path, 'r') as f:
        try:
            data = json.load(f)
        except json.JSONDecodeError as e:
            print(f"Error while parsing JSON: {e}")
            return None
    return data

# Load the data
DATA = load_data(INPUT_PATH)

# Write the data to a pandas DataFrame
def write_to_dataframe(data: dict) -> pd.DataFrame:
    df = pd.DataFrame(data['responses'])
    return df

# Write the data to a pandas DataFrame
df = write_to_dataframe(DATA)

# Print column names
print(df.columns)

# Decorator to create a figure and save it to a png file in ./images
def save_fig(path: str):
    if not os.path.exists('./images'):
        os.makedirs('./images')

    if not path.endswith('.png'):
        path = path + '.png'

    def decorator(func: Callable[..., None]):
        def wrapper(*args, **kwargs):
            fig = plt.figure()
            func(fig, *args, **kwargs)
            fig.savefig(f'./images/{path}')
        return wrapper
    return decorator
    
# Function to normalize a dataframe for a set of groups defined by a column
def normalize(df: pd.DataFrame, column: str) -> pd.DataFrame:
    grouped = df.groupby(column)
    normalized = pd.DataFrame()

    for name, group in grouped:
        group = group.drop(columns=[column])
        group = group.apply(pd.to_numeric, errors='coerce')
        group = group.div(group.sum(axis=1), axis=0)
        group[column] = name
        normalized = normalized.append(group)

    return normalized

# Function to create a histogram for a set of groups defined by a column and a feature to plot (x-Axis: Group, y-Axis: Count of normalized values as stacked bars)
def create_histogram(fig: Figure, df: pd.DataFrame, labels_groups: Dict[str, str], labels_x_axis: Dict[str, str], question: str, title: str):
    df_group = df.groupby([question, 'G04Q01[1]']).size().unstack()
    df_group = df_group.fillna(0)
    df_group = normalize(df_group, 'G04Q01[1]')
    df_group = df_group.rename(columns=labels_groups)
    df_group = df_group.rename(columns=labels_x_axis)

    df_group.plot(kind='bar', stacked=True, ax=fig.gca())
    plt.title(title)
    plt.xlabel(labels_x_axis[question])
    plt.ylabel('Normalized count')
    plt.legend(title='Primary mode of transportation', bbox_to_anchor=(1.05, 1), loc='upper left')

# Create a group for the Faculties (G01Q02)
GROUP_FACULTY = df.groupby()